[tool.poetry]
name = "pre-commit-hooks"
version = "0.1.0"
description = "Collection of useful pre-commit hooks"
authors = ["Florian Meinicke <florian@fmeinicke.xyz>"]
license = "MIT"
readme = "README.md"
packages = [{include = "*", from = "pre_commit_hooks"}]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"


[tool.poetry.scripts]
check-no-special-commits = "check_no_special_commits:main"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 80
src = ["src"]

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 80

[tool.ruff.lint]
# Allow applying all unsafe fixes in the `UP` rules and `F401` without the
# `--unsafe-fixes` flag
extend-safe-fixes = ["UP", "F401"]

# On top of the default `select` (`E4`, E7`, `E9`, and `F`), enable all
# `pydocstyle` rules, limiting to those that adhere to the NumPy convention via
# `convention = "numpy"`, below.
extend-select = [
    "D",        # pydocstlye
    "UP",       # pyupgrade
    "I",        # isort
    "A",        # flake8-builtins
    "B",        # flake8-bugbear
    "FA",       # flake8-future-annotations
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "RET",      # flake8-return
    "SIM",      # flake8-simplify
    "RUF",      # ruff-specific rules
    "C90",      # mccabe
]

ignore = [
    # On top of the NumPy convention, disable the following
    "D100", # module docstrings
    "D104", # package docstrings
    "D200", # single-line docstrings to fit on the first line
    "D202", # the function definition to follow the docstring w/o a blank line
    "D205", # a blank line between the summary and description (we often have multi-line summaries)
    "D401", # the first line to be in imperative mood
    "D417", # documentation for every function parameter
    "E741", # ambiguous variable names (`l`, `O`, `I`)
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
